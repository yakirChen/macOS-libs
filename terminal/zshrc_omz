#!/usr/bin/env zsh
export ZSH=${HOME}/.ohmyzsh
ZSH_THEME="jtriley"
plugins=(
    # ant
    mvn
    # urltools
    # osx
    # xcode
    git
    git-extras
    git-lfs
    # gitfast
    # git-prompt
    #spring
    # rust
    # rustup
    # cargo
    # curl
    # golang
    # textmate
    # npm
    brew
    # tmux
    # history
    # docker
    # swiftpm
    # colored-man-pages
    # colorize
    # nmap
    # zsh-completions
    # history-substring-search
    #zsh-autosuggestions # https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md
    # zsh-syntax-highlighting # https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md
    F-Sy-H
    H-S-MW
    # zsh-history-substring-search
    # zsh-navigation-tools
    # torrent
    # docker-compose
)

zstyle ":plugin:history-search-multi-word" reset-prompt-protect "1"
zstyle ":history-search-multi-word" page-size "15"                     # Number of entries to show (default is $LINES/3)
zstyle ":history-search-multi-word" highlight-color "fg=yellow,bold"   # Color in which to highlight matched, searched text (default bg=17 on 256-color terminals)
zstyle ":plugin:history-search-multi-word" synhl "yes"                 # Whether to perform syntax highlighting (default true)
zstyle ":plugin:history-search-multi-word" active "underline"          # Effect on active history entry. Try: standout, bold, bg=blue (default underline)
zstyle ":plugin:history-search-multi-word" check-paths "yes"           # Whether to check paths for existence and mark with magenta (default true)
zstyle ":plugin:history-search-multi-word" clear-on-cancel "no"        # Whether pressing Ctrl-C or ESC should clear entered query


# autoload znt-history-widget
# zle -N znt-history-widget
# bindkey "^R" znt-history-widget

# export PROMPT_COMMAND='echo -n [$(date +%H:%M:%S)]'
# export PS1="\u@\h [\$(date +%H:%M:%S)]> "

# export PS1="\\033[01;36m[cyan]%}%T%{$fg_bold[green]%} %{$fg_bold[white]%}%n%{$fg[magenta]%}@%{$fg_bold[white]%}%m %{$fg_bold[green]%}%d
# %{$fg_bold[yellow]%}%% %{$reset_color%}"

# func ssproxy() {
#     sslocal -s $1 -p $2 -l 1080 -k $3  -t 300 -m aes-256-cfb
# }

# ########################################## User Configuration #####################################
export BREW=/opt/homebrew
export HOMEBREW_CELLAR=${BREW}/Cellar
export BREW_OPT=${BREW}/opt
export LOCAL=${HOME}/local
export VLM=/Volumes/sm
export VLM_REPOS=${VLM}/repos
export VLM_SERVERS=${VLM}/servers
# export CHEAT_USER_DIR='/Users/yakir/app/cheats'
# export CHEAT_PATH='/Users/yakir/app/cheats'
# export CHEAT_COLORS=true

# 语言工具
export RUBY_HOME=${LOCAL}/ruby
export GOROOT=${LOCAL}/go
# export GOPROXY=https://mirrors.aliyun.com/goproxy/
export GOPROXY=https://goproxy.cn,direct
export GOPATH=${VLM_REPOS}/go/gopath
export GOCACHE=${VLM_REPOS}/go/gocache
# export ERL_HOME=${LOCAL}/otp
export CARGO_HOME=${LOCAL}/rust
# export SRCROOT=${LOCAL}/rust
export CARGO_PATH=${CARGO_HOME}
export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
export RUSTUP_HOME=${LOCAL}/rust
export ZIG_HOME=${LOCAL}/zig
# export RUSTUP_DIST_SERVER="https://rsproxy.cn"
# export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"
# export RUSTUP_DIST_SERVER=https://static.rust-lang.org
# export RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup
# export RUSTUP_TRACE_DIR=${LOCAL}/rust/trace
export RUSTFLAGS='-C target-cpu=native'
# export RUSTFLAGS='-C prefer-dynamic'
export RUSTUP_TOOLCHAIN=stable
# export RUSTUP_TOOLCHAIN=nightly
# export MIRI_SYSROOT=${VLM_REPOS}/miri
# export RUST_SRC_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib/rustlib/src/rust/src
# export DYLD_LIBRARY_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib:$DYLD_LIBRARY_PATH
# export LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
# export DYLD_LIBRARY_PATH=$(rustc --print sysroot)/lib:$DYLD_LIBRARY_PATH
# export STACK_HOME=${LOCAL}/stack
# export CARTHAGE_HOME=${LOCAL}/carthage
# export FLATBUFFERS_HOME=${LOCAL}/flatbuffers

# export IPFS_PATH=/Volumes/sm/repos/ipfs

# export OCAML_HOME=${LOCAL}/ocaml
# export GROOVY_HOME=${LOCAL}/groovy
# export GCC_HOME=${LOCAL}/gcc
# export CLANG_HOME=${VLM_REPOS}/clang
# export IGV_HOME=${LOCAL}/igv

# 开发辅助
export JADX_HOME=${LOCAL}/jadx
export VIM_CONFIG_PATH=${HOME}/.vim
export SQLITE=${LOCAL}/sqlite
export MYSQL_BASE_DIR=${VLM_SERVERS}/mysql
export MYSQL_COMMON_DIR=${VLM_SERVERS}/mysql
export MYSQL_DATA_DIR=${VLM_REPOS}/mysql/data
export MYSQL_LOGS_DIR=${VLM_REPOS}/mysql/logs
export METAL_DEVICE_WRAPPER_TYPE=1
export MTL_SHADER_VALIDATION=1
export MYSQL_SHELL=${LOCAL}/mysql-shell

# export PGSOCKET=/Volumes/sm/repos/pgsql
# export PGDATA=/Volumes/sm/repos/pgsql/data
# export PGWAL=/Volumes/sm/repos/pgsql/wal
# export PGLOG=/Volumes/sm/repos/pgsql/pglog.log
# export PGCTLLOG=/Volumes/sm/repos/pgsql/pgctllog.log

export NGINX_HOME=/Users/yakir/local/nginx
# export BTRACE_HOME=${LOCAL}/btrace

# 运行时环境变量
export PKG_CONFIG=${BREW_OPT}/pkg-config/bin/pkg-config       # pkg-config
# export PKG_CONFIG_PATH="${BREW_OPT}/libressl/lib/pkgconfig"
# export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:"${BREW_OPT}/libffi/lib/pkgconfig/"
# export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:"${BREW_OPT}/ncurses/lib/pkgconfig"
# export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:"${BREW_OPT}/guile@2/lib/pkgconfig"
# export PKG_CONFIG_LIBDIR=${LOCAL}/lib/pkgconfig
# export CFLAGS="-I${LOCAL}/include -I${LOCAL}/include/openssl" # -I${LOCAL}/include/readline -I${LOCAL}/include/sodium -I${LOCAL}/include/freetype2"
# # -I${LOCAL}/include/lzma -I${LOCAL}/include/freetype2
# export CXXFLAGS="--std=c++17 "
# export CPPFLAGS=${CFLAGS}
# export LDFLAGS="-L${LOCAL}/lib"
export BOOST_ROOT=${VLM_SERVERS}/boost
export BOOSTDIR=${BOOST_ROOT}/include
# export OPAMROOT=${VLM_REPOS}/opam
# export OCAML_TOPLEVEL_PATH=${VLM_REPOS}/ocaml

# 打包编译工具
# export CHEZ_SCHEME_HOME=${VLM_SERVERS}/chez_scheme
# export CMAKE_HOME=${LOCAL}/cmake
export M2_HOME=${LOCAL}/maven                   # maven
# export MD_HOME=${LOCAL}/mvnd                   # maven
# export M2_HOME=${LOCAL}/mvnd                   # maven
# export SBT_HOME=${LOCAL}/sbt                   # maven
export MAVEN_CONFIG=${M2_HOME}/conf
export MAVEN_SKIP_RC=true
export MAVEN_REPOSITORY=${VLM_REPOS}/m2/repository
# export SBT_OPTS="-Dsbt.global.base=/Volumes/sm/repos/sbt -Dsbt.ivy.home=/Volumes/sm/repos/ivy2"
export ANT_HOME=${LOCAL}/ant                    # ant
export GRADLE_HOME=${LOCAL}/gradle              # gradle
# export JAVACC_HOME=${LOCAL}/javacc
# export NASM_HOME=${LOCAL}/nasm
# export BISON_HOME=${LOCAL}/bison
export PROTOBUF_HOME=${LOCAL}/protoc
# export YASM_HOME=${LOCAL}/yasm

# repos
# export HASKELL_BIN=${VLM_REPOS}/haskell
export GRADLE_USER_HOME=${VLM_REPOS}/gradle
# export COURSIER_CACHE=${VLM_REPOS}/coursier
# export COURSIER_INSTALL_DIR=${LOCAL}/coursier
# export GRADLE_USER_HOME=${TVLM_REPOS}/gradle
export GEM_HOME=${VLM_REPOS}/gem
export GEM_PATH=${VLM_REPOS}/gem

# 日常工具
# export ARIA2_HOME=${LOCAL}/aria2              # aria2
# export FFMPEG_HOME=${LOCAL}/ffmpeg
# export GNUPG_HOME=${LOCAL}/gnupg
# export NMAP_HOME=${LOCAL}/nmap
# export SPRING_HOME=${LOCAL}/spring
# export DOCKER_HOME=${HOME}/.docker

# export ARTHAS_HOME=${LOCAL}/arthas

# JDK 多版本切换
# alias jdk8="export JAVA_VERSION=1.8 && export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)"
# alias jdk11="export JAVA_VERSION=11 && export JAVA_HOME=$(/usr/libexec/java_home -v 11)"

# export JAVA_8_HOME=$(/usr/libexec/java_home -v 1.8)
# export JAVA_11_HOME=$(/usr/libexec/java_home -v 11)
# export JAVA_17_HOME=$(/usr/libexec/java_home -v 17)
# export JAVA_21_HOME=$(/usr/libexec/java_home -v 21)
# export JAVA_22_HOME=$(/usr/libexec/java_home -v 22)

export JAVA_8_HOME="/Library/Java/JavaVirtualMachines/jdk-1.8.jdk/Contents/Home"
export ZULU_8_HOME="/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home"
export BELL_8_FULL_HOME="/Library/Java/JavaVirtualMachines/liberica-jdk-8-full.jdk/Contents/Home"
export BELL_21_HOME="/Library/Java/JavaVirtualMachines/liberica-jdk-21-full.jdk/Contents/Home"
export JAVA_11_HOME="/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home"
export JAVA_17_HOME="/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home"
export JAVA_21_HOME="/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home"
export JAVA_24_HOME="/Library/Java/JavaVirtualMachines/jdk-24.jdk/Contents/Home"

# export JAVA_SEMERU_HOME=/Library/Java/JavaVirtualMachines/semeru/Contents/Home
# export JAVA_ZULU_HOME=/Library/Java/JavaVirtualMachines/zulu/Contents/Home
# export JAVA_ZERO_SLOWDEBUG_HOME=${HOME}/local/jdk/jdk-18.slowdebug.jdkContents/Home
# export JAVA_ZERO_FASTDEBUG_HOME=${HOME}/local/jdk/jdk-17.fastdebug.jdk/Contents/Home
export GRAALVM_HOME=/Library/Java/JavaVirtualMachines/graalvm-jdk-24/Contents/Home
#export JAVA_ADOPT_HOT_14_HOME=/Users/yakir/local/jdk/jdk-14.0.1+7/Contents/Home/
#export JAVA_ZERO_HOME=/Users/yakir/local/jdk-15.jdk/Contents/Home
#export JDK_18_HOME=${JAVA_8_HOME}
#export JDK_11_HOME=${JAVA_11_HOME}
#export KOTLIN_HOME=${LOCAL}/kotlinc
#export SCALA_HOME=${LOCAL}/scala
#export SBT_HOME=${VLM_SERVERS}/sbt
#export JDK_BOOT_DIR=${JAVA_8_HOME}
# export GRAALVM_HOME=${LOCAL}/graalvm-ce-java11-20.3.0/Contents/Home

alias jdk8="export JAVA_HOME=${JAVA_8_HOME}"
alias zulu8="export JAVA_HOME=${ZULU_8_HOME}"
# alias jdkzulu="export JAVA_HOME=${JAVA_ZULU_HOME}"
alias jdk11="export JAVA_HOME=${JAVA_11_HOME}"
alias jdk17="export JAVA_HOME=${JAVA_17_HOME}"
alias jdk21="export JAVA_HOME=${JAVA_21_HOME}"
alias jdk24="export JAVA_HOME=${JAVA_24_HOME}"

function graal() {
    export JAVA_HOME=${GRAALVM_HOME}
    export PATH=$JAVA_HOME/bin:$PATH
}

# jdk8
zulu8
# bell8f
# bell8

# node 多版本切换
export NODE_HOME=${LOCAL}/node
export NODE_OPTIONS="--max_old_space_size=4096"
export NPM_GLOBAL=${VLM_REPOS}/npm/node_global
# export NPM_CACHE=${VLM_REPOS}/npm_cache

function switchNode() {
    echo "switch node $NODE_VERSION" && rm -f ${LOCAL}/node && ln -sf ${LOCAL}/node${1} ${LOCAL}/node
}

export ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/


# Zig
export ZIG_GLOBAL_CACHE_DIR=/Volumes/sm/repos/zig/global
export ZIG_LOCAL_CACHE_DIR=/Volumes/sm/repos/zig/local

# export _JAVA_LAUNCHER_DEBUG=1
# export DEF_JAVA_OPTS="-Xms100M -Xmx256M -Xverify:none -XX:ReservedCodeCacheSize=100m -XX:+UseG1GC -XX:+AlwaysPresmuch -XX:+UseNUMA -XX:+UseCompressedOops -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryErro-XX:+PrintGCDetails \
# export ES_JAVA_OPTS="-Xms1G -Xmx1G -server -XX:+UseG1GC -XX:+UseNUMA -XX:+UseCompressedOops -XX:+AlwaysPresmuch -XX:SurvivorRatio=8 -XX:+AlwaysPresmuch"
# export JAVA_DEBUG_OPTS="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,suspend=n,address="
#export JAVA_OPTS="${DEF_JAVA_OPTS} --illegal-access=deny -XX:HeapDumpPath=${VLM_REPOS}/logs/jvm_error.hprof"
# export JAVA_OPTS="${DEF_JAVA_OPTS} -XX:HeapDumpPath=${VLM_REPOS}/logs/jvm_error.hprof"
# export MAVEN_OPTS="-XX:+UseZGC"

# export MAVEN_OPTS="${MAVEN_OPTS} -agentpath:/Users/yakir/Library/Java/Extensions/libConfusing.dylib"
# export MAVEN_OPTS="${MAVEN_OPTS} -XX:+TraceClassLoading -XX:+TraceClassUnloading -XX:+TraceClassLoadingPreorder -XX:+TraceExceptions"

# export MAVEN_OPTS="${MAVEN_OPTS} -agentpath:/Users/yakir/Developer/think/book/book-instrument/book-confusing/libConfusing.dylib"
# export MAVEN_OPTS="${MAVEN_OPTS} -Xlog:class+load=info -Xlog:class+unload=info"
# export MAVEN_OPTS="${MAVEN_OPTS} -Xlog:class+load=info -Xlog:class+unload=info -Xlog:exceptions=info"
# export MAVEN_OPTS="${MAVEN_OPTS} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=4000"

# export ANT_ARGS="-nouserlib -lib ${LOCAL}/ant/lib"
# export ANT_OPTS="-Djava.io.tmpdir=${VLM_REPOS}/javaiotmp -Divy_install_path=${LOCAL}/ant/lib -Ddest=${VLM_REPOS}/ivy -Divy.default.ivy.user.dir=${VLM_REPOS}/ivy -DdefaultCacheDir=${VLM_REPOS}/ivy"
# export SBT_OPTS="-Dsbt.global.base=${VLM_SERVERS}/sbt -Dsbt.version=1.0.4 -Dsbt.boot.directory=${VLM_REPOS}/sbt/boot -Dsbt.ivy.home=${VLM_REPOS}/ivy2 -Dsbt.override.build.repos=true -Dsbt.repository.config=${VLM_REPOS}/sbt/repositories"

# for HTTP_METHOD in GET HEAD POST PUT DELETE TRACE OPTIONS; do
#     alias "${HTTP_METHOD}"="lwp-request -m '${HTTP_METHOD}'"
# done
# GET www.baidu.com

########################################### OpenSSL ##################################################
# export OPENSSL_CFLAGS=${BREW_OPT}/libressl/include        # libressl
export OPENSSL_ROOT_DIR=${BREW_OPT}/openssl@3        # openssl
export OPENSSL_CFLAGS=${OPENSSL_ROOT_DIR}/include        # openssl
# export OPENSSL_LIBS=${HOME}/local/lib/                 # openssl lib 貌似要所有的动态链接库都列出来
export OPENSSL_INCLUDE_DIR=${OPENSSL_CFLAGS}
export DEP_OPENSSL_INCLUDE=${OPENSSL_CFLAGS}
# export OPENSSL_LIB_DIR=${BREW_OPT}/libressl/lib/
export OPENSSL_LIB_DIR=${OPENSSL_ROOT_DIR}/lib

# export CFLAGS=" -I${OPENSSL_CFLAGS} "
# export LDFLAGS=" -L${OPENSSL_LIB_DIR} "


SILVER=(status:black:white dir:blue:black git:green:black cmdtime:magenta:black)
export SILVER_SHELL=$0

# ############################################ PATH #################################################

PATHS=(
    "${LOCAL}/bin"
    "${LOCAL}/kits"
    "${BREW}/bin"
    "${BREW_SBIN}/sbin"
    "${CARGO_HOME}/bin"
    "${M2_HOME}/bin"
    "${GRADLE_HOME}/bin"
    "${ANT_HOME}/bin"
    "${SQLITE}/bin"
    "${MYSQL_BASE_DIR}/bin"
    "${MYSQL_BASE_DIR}/support-files"
    "${GOROOT}/bin"
    "${GOPATH}/bin"
    "${NODE_HOME}/bin"
    "${NPM_GLOBAL}/bin"
    "${GEM_HOME}/bin"
    "${RUBY_HOME}/bin"
    "${NGINX_HOME}"
    "${PROTOBUF_HOME}/bin"
    "${BREW_OPT}/erlang@27/bin"
)

for p in "${PATHS[@]}"; do
    [[ -d "$p" ]] && PATH="$p:$PATH"
done

export PATH

FPATH="${BREW}/share/zsh/site-functions:${FPATH}"

source $ZSH/oh-my-zsh.sh

# zmodload zsh/zprof
# zsh config
HIST_STAMPS="yyyy-mm-dd"
DISABLE_UPDATE_PROMPT=true
DISABLE_AUTO_UPDATE=true
HISTSIZE=1000000000
SAVEHIST=$HISTSIZE
HISTFILESIZE=$HISTSIZE
setopt NO_NOMATCH
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
#setopt inc_append_history_time
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

unalias mvn
# unalias mvnd

# ########################################## User Alias Commond #####################################
alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
alias pin='ping -c 6 $1'
alias wgetnc='wget --no-check-certificate'
alias zshconfig="sl ~/.zshrc"
alias week='date +%V'
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"
# alias recaf="${JAVA_11_HOME}/bin/java -Dapplication.home=${JAVA_11_HOME} -jar ${JARS}/recaf.jar >/dev/null 2>&1 &"
# alias bcv="${JAVA_11_HOME}/bin/java -Dapplication.home=${JAVA_11_HOME} -jar ${JARS}/Bytecode-Viewer.jar >/dev/null 2>&1 &"
# alias pg="ps aux|rg $1"
# alias jpg="jps -lv|rg $1"
alias mdutildisto="sudo mdutil -i off -d -X /Volumes/sm ; sudo mdutil -i off /Volumes/sm"
# alias ydll="ydl --proxy socks5://127.0.0.1:1080 --write-sub --all-subs --yes-playlist "
alias luamake="/Users/yakir/local/luamake/luamake"

# alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

function myip(){
    curl -L -s https://myipv4.p1.opendns.com/get_my_ip | jq
}


function reset_git() {
    rm -rf
    branch=$(git status | grep "On branch" | awk '/On branch/ {print $3}')
    echo "branch is ${branch}"
    if [[ ! "main" -eq "${branch}" && ! "master" -eq ${branch} && ! "develop" -eq "${branch}" ]]; then
        echo "not support branch"
        return -1
    fi
    git reset . && \
    git checkout -- . && \
    git checkout "origin/${branch}" &&  \
    git branch -D "${branch}" ; \
    git status && \
    git checkout "${branch}" && \
    git status
}

function prune_remote() {
    git remote prune origin
}

function yl() {
    echo "$1"
    /Users/yakir/local/bin/yt-dlp_macos --proxy socks5://127.0.0.1:7890 -v --sub-langs "zh.*,en*" --write-auto-subs --write-subs $1
}

function ylc() {
    echo "$1"
    /Users/yakir/local/bin/yt-dlp_macos --proxy socks5://127.0.0.1:7890 -v --sub-langs "zh.*,en*" --cookies-from-browser chrome --write-auto-subs --write-subs $1
}

function ylf() {
    echo "$1"
    /Users/yakir/local/bin/yt-dlp_macos --proxy socks5://127.0.0.1:7890 -v --sub-langs "zh.*,en*" --cookies-from-browser firefox --write-auto-subs --write-subs $1
}

function  curlc() {
    echo "${1}"
    if [[ -z ${2} ]]; then
        curl -O -C - -k -L $1
    else
        echo "$2"
        curl -C - -k -L --create-dirs $1 -o $2
    fi
}

function jgc() {
    pname=""
    if [[ -z ${1} ]]; then
        pname="RemoteMavenServer"
    else
        pname="${1}"
    fi
    echo "${pname}"
    jcmd $(jps -l | grep $pname | awk -F ' ' '{print $1}') GC.run
}

# function recaf(){
#     export JAVA_HOME=${JAVA_21_HOME}
#     /Users/yakir/local/recaf/bin/recaf-ui >/dev/null 2>&1 &
#     export JAVA_HOME=${JAVA_8_HOME}
# }

function jadx(){
    export JAVA_HOME=${JAVA_21_HOME}
    ${JADX_HOME}/bin/jadx-gui  >/dev/null 2>&1 &
    export JAVA_HOME=${JAVA_8_HOME}
}

MVN_MB="-Dmaven.compiler.fork=true -T12"
MVN_TEMPLATE="mvn clean package -DskipTests ${1} -U "
MVN_COMPILE_TEMPLATE="mvn clean compile -DskipTests ${1} -U "
alias mvnc="${M2_HOME}/bin/mvn clean"
alias mvnsrc="${M2_HOME}/bin/mvn dependency:sources"
alias mvndocs="${M2_HOME}/bin/mvn dependency:resolve -Dclassifier=javadoc"
alias mvnDepCheckShushi="mvn org.codehaus.mojo:versions-maven-plugin:display-plugin-updates -Pshushi -U ; mvn org.codehaus.mojo:versions-maven-plugin:display-property-updates -Pshushi -U"
alias mvncs="mvn  -gs ~/.m2/settingscs.xml -s ~/.m2/settingscs.xml -Poinone "

function mvna(){
    p=$1
    profile=""
    if [[ -n $p ]]; then
        profile="-P$p"
    fi
    mvn dependency:resolve-sources $profile
    mvn clean compile -DskipTests $profile -U
    mvn dependency:resolve-plugins -DskipTests $profile -U
    mvn clean $profile
}

function mvnDepCheck(){
    pp=$1
    pt=$2
    t=""
    p=""
    if [[ -n $pp ]]; then
        p="-P$pp"
    fi
    if [[ -n $pt ]]; then
        t="-T$pt"
    fi
    mvn org.codehaus.mojo:versions-maven-plugin:display-plugin-updates $p $t -U ; \
    mvn org.codehaus.mojo:versions-maven-plugin:display-property-updates $p $t -U ; \
    mvn org.codehaus.mojo:versions-maven-plugin:display-dependency-updates $p $t -U
}

function mvnrun(){

    lifecycle=""
    settings=""
    profile=""
    sprofile=""
    goback="-PgoBack=false"
    druid=""

    while getopts ":p:l:r:s:b:d:" opt
    do
        case $opt in
            p)
                profile=$OPTARG
            ;;
            l)
                lifecycle=$OPTARG
            ;;
            r)
                sprofile=$OPTARG
            ;;
            s)
                settings="_$OPTARG"
            ;;
            b)
                goback="-PgoBack=true"
            ;;
            d)
                druid="-Ddruid.filters=log4j -Ddruid.log.stmt.executableSql=true"
            ;;
            *)
                echo "未知参数$opt, $OPTARG"
            ;;
            ?)
                echo "未知参数$opt, $OPTARG"
            ;;
        esac
    done

    if [[ -z $lifecycle ]]; then
        lifecycle="-Plifecycle=INSTALL"
    else
        lifecycle="-Plifecycle=$lifecycle"
    fi
    if [[ ! -z $s ]]; then
        settings="_"$s
    fi

    echo "spring profile: [${sprofile}]  maven profile:[${profile}]"
    mvn -gs ${HOME}/.m2/settings${settings}.xml -s ${HOME}/.m2/settings${settings}.xml -U clean compile spring-boot:run \
        -Dspring-boot.run.profiles=$sprofile \
        -Dspring-boot.run.arguments="$lifecycle $goback $druid -PenvProtected=false -PstrictProtected=false -PsaveEnvironments=false" -P$sprofile -P$profile
}

function thinrun(){
    workspace=$1
    jar=$2
    cd ${workspace}
    java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=18881 \
      -Dloader.path=${workspace}/lib,${workspace}/extlib \
      -jar \
      -Duser.timezone=GMT+08:00 \
      -Dhttps.protocols=TLSv1.2 \
      -Dspring.profiles.active=dev \
      ${workspace}/${jar} \
      -Plifecycle=INSTALL \
      -PenvProtected=false -PstrictProtected=false -PsaveEnvironments=false \
      --spring.config.location=${workspace}/application-dev.yml
}

# alias mx="mx --user-home=${VLM_REPOS}/mx"
# alias schemescript='scheme --script'
# alias clojure='java -jar ${LOCAL_LIB_DIR}/clojure/clojure.jar'

#alias hg="source ${VLM_REPOS}/venv/hg/bin/activate"
#alias hgd='deactivate'

########################################### rustup ##################################################
alias rnr="rustup run nightly cargo --color always "
alias rsr="rustup run stable cargo --color always "
alias rbr="rustup run beta cargo --color always "
alias ru="rustup update ; rustup self update "

############################################ alias ##################################################
#alias rm="rm -v "
alias bs="brew search --desc -v --eval-all"
# alias g="git fetch --prune --tag --progress; git fetch --tags --prune origin -f ; git pull --all"
alias g="git fetch --tags --prune --tag --progress -f; git pull --all"
function gitauthors(){
    git log --format='%aN' | sort -u | while read name; do echo -en "$name\t"; git log --author="$name" --pretty=tformat: --numstat | grep "\(.html\|.java\|.xml\|.properties\|.css\|.js\|.txt\)$" | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }' -; done
}
#alias zj="zellij options --simplified-ui true --disable-mouse-mode"
function gcr(){
    echo ${1}
    p2=""
    if [[ -n ${2} ]]; then
        p2=${2}
        echo ${2}
    fi
    #set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git clone --jobs 12 --recurse-submodules --shallow-submodules ${1} $p2 -v -v; set +x
    git clone --jobs 12 --recurse-submodules --shallow-submodules ${1} $p2
}
alias gcr1="git clone --jobs 4 --recurse-submodules --shallow-submodules --depth 1 "

# alias antlr4='java -Xmx500M -cp "/Volumes/sm/app/antlr-4.7.2-complete.jar:$CLASSPATH" org.antlr.v4.smol'
# alias grun='java -Xmx500M -cp "/Volumes/sm/app/antlr-4.7.2-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig'
alias ssh2="ssh -p2222 "
# alias proxy="export ALL_PROXY=socks5://127.0.0.1:1080"
# alias cproxy="export ALL_PROXY=socks5://127.0.0.1:7890"
function proxy(){
    export ALL_PROXY=socks5://127.0.0.1:1080
}
function cproxy(){
    export https_proxy=http://127.0.0.1:7890
    export http_proxy=http://127.0.0.1:7890
    export all_proxy=socks5://127.0.0.1:7890
}
function uproxy(){
    unset https_proxy
    unset http_proxy
    unset all_proxy
}

# alias pproxy="export https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080"
# alias cargo_proxy="export CARGO_HTTP_PROXY=127.0.0.1:7890"
# unalias la
# alias ls="lsd --color=always --icon=never"

# alias atrust="export https_proxy=http://127.0.0.1:8888 http_proxy=http://127.0.0.1:8888 all_proxy=socks5://127.0.0.1:9080"

# export ALL_PROXY=socks5://127.0.0.1:7890

# unalias gg
# function gg() {
#     git_url=${1}
#     repo_name=${2}
#     repo_dir=''
#     if [[ ! -z "$repo_name" ]]; then
#         repo_dir=$repo_name
#     else
#         temp=${git_url##*/}
#         repo_dir=${temp%*.git}
#     fi
#     remain_str=${git_url##*https://github.com/}
#     head_str="https://github.com.cnpmjs.org/"
#     `git clone --recurse-submodules ${head_str}${remain_str}`
#     echo "$repo_dir $git_url"
#     cd $repo_dir
#     git_remote=`git remote`
#     git remote remove ${git_remote}
#     git remote add ${git_remote} ${git_url}
#     cd -
# }

 # source $ZSH/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

 # OPAM configuration
# . ${VLM_REPOS}/opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

#[ -s "/Users/yakir/local/jabba/jabba.sh" ] && source "/Users/yakir/local/jabba/jabba.sh"
export FLUTTER_STORAGE_BASE_URL="https://mirrors.tuna.tsinghua.edu.cn/flutter"

# ============快捷键设置===================
# 详见 http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html


# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
# setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
# setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
# setopt SHARE_HISTORY             # Share history between all sessions.
# setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
# setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
# setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
# setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
# setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
# setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
# setopt HIST_BEEP                 # Beep when accessing nonexistent history.


# mcfly
# export MCFLY_LIGHT=TRUE
# export MCFLY_RESULTS=50
# eval "$(mcfly init zsh)"
# zprof

# HSTR configuration - add this to ~/.zshrc
# alias hh=hstr                    # hh to be alias for hstr
# setopt histignorespace           # skip cmds w/ leading space from history
# bindkey -s "\C-r" "\C-a hstr -- \C-j"     # bind hstr to Ctrl-r (for Vi mode check doc)
# export HSTR_TIOCSTI=y
# export HSTR_CONFIG=hicolor,prompt-bottom,raw-history-view
